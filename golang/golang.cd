commands to create a module | ```
$ mkdir hello
$ cd hello
$ go mod init example/user/hello
go: creating new go.mod: module example/user/hello
$ cat go.mod
module example/user/hello

go 1.16
$
```
write hello world | ```
package main

import "fmt"

func main() {
	fmt.Println("Hello world")
}
```
A file named go.mod in a module declares | the module path, the import path prefix for all packages within the module.
Each module's path not only serves as an import path prefix for its packages, but also | indicates where the go command should look to download it.
An import path is | a string used to import a package.
A package's import path is the module path | joined with its subdirectory within the module.
define module | A module is a collection of related Go packages that are released together.
define package | A package is a collection of source files in the same directory that are compiled together.
packages | `
Every Go program is made up of packages.

Programs start running in package "main".

Functions, types, variables, and constants defined in one source file are visible to all other source files within the same package.
`
By convention, the package name is | the same as the last element of the import path.
imports | `
"Factored" import statement:

```
import (
    "fmt"
    "math"
)
```

You can also write import statements like this:

```
import "fmt"
import "math"
```

But it is good style to use the factored import statement.
`
exported names | `
In Go, a name is exported if it begins with a capital letter.

When importing a package, you can refer only to its exported names.
`
Write a function that adds two ints and returns the sum. | ```
func add(x int, y int) int {
    return x + y
}
```
When two or more consecutive named function parameters share a type, | you can omit the type from all but the last. (x, y int)
Write a function that takes two strings and returns the strings in swapped order. | ```
func swap(x, y string) (string, string) {
    return y, x
}
```
named return values | `
Go's return values may be named. If so, they are treated as variables defined at the top of the function

These names should be used to document the meaning of the return values.

A "return" statement without arguments returns the named return values. This is known as a "naked" return.

Naked return statements should be used only in short functions.
`
the "var" statement | `
The "var" statement declares a list of variables. The type is last.

A "var" statement can be at package or function level.

```
var x, y, z int
```
`
the var statement with initializers | `
A var declaration can include initializers, one per variable.

if an initializer is present, the type can be omitted. The variable will take the type of the initializer.
`
short variable declarations | `
Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.

Outside a function, every statement begins with a keyword and so the := construct is not available.
`
basic types | `
```
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128
```

The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. When you need an integer value you should use int unless you have a specific reason to use a sized or unsigned integer type.
`
var block | `
Variable declarations can be "factored" into blocks, as with import statements.

```
var (
    ToBe   bool       = false
    MaxInt uint64     = 1<<64 - 1
    z      complex128 = cmplx.Sqrt(-5 + 12i)
)
```
`
zero values | `
Variables declared without an explicit initial value are given their zero value.

The zero value is:

0 for numeric types

false for boolean types

"" (the empty string) for strings
`
type conversions | `
The expression T(v) converts the value v to type T.

In Go, assignment between items of different type requires an explicit conversion.
`
type inference | `
When declaring a variable without specifying an explicit type (either by using the := syntax or var = expression syntax), the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

```
var i int
j := i // j is an int
```
`
type inference and numerics | `
When the right hand side contains an untyped numeric constant, the new variable may be an int, float64, or complex128 depnding on the precision of the constant:

```
i := 42           // int
f := 3.142        // float64
g := 0.867 + 0.5i // complex128
```
`
constants | `
Constants are declared like variables, but with the const keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the := syntax.

```
const Pi = 3.4
```
`
numeric constants | `
Numeric constants are high-precision values.

An untyped constant takes the type needed by its context.
`
for statement | `
Go has only one looping construct, the for loop.

The basic for loop has three components separated by semicolons:

1) the init statement: executed before the first iteration

2) the condition expression: evaluated before every iteration

3) the post statement: executed at the end of every iteration

The init statement will often be a short variable declaration, and the variables declared there are visible only in the scope of the for statement.

The loop will stop iterating once the boolean condition evaluates to false.
`
Write a for loop that will print the 0 to 10. | ```
for i := 0; i < 11; i++ {
    fmt.Println(i)
}
```
for optional statements | The init, condtion, and post statements are optional.
Write a while loop. | ```
sum := 1
for sum < 1000 {
    sum += 1
}
```
Write an infinite loop in two different ways. | ```
for {
}

for true {
}
```
if statement | `
An expression and braces {} are needed for Go's if statements but parentheses () are not.

```
if true {
}
```
`
if with a short statement | `
The if statement can start with a short statement to execute before the condtion.

Variables declared by the statement are only in scope until the end of the if.
```
if a := true; a {
}
```
`
if and else | `
Variables declared inside an if short statement are also available inside any of the else blocks.

```
if a := false; a {
} else {
    fmt.Println(a) // prints false
}

// a is out of scope here
```
`
switch statement | `
A switch statement is a shorter way to write a sequence of if - else statements.

It runs the first case whose value is equal to the condition expression.

Go only runs the selected case.

Go's switch cases need not be constants, and the values involved need to be integers.

A switch statement can start with an optional short statement.

```
switch os := runtime.GOOS; os {
case "darwin":
    fmt.Println("OS X")
case "linux":
    fmt.Println("Linux")
default:
    fmt.Println("Other")
}
```
`
switch evaluation order | Switch cases evaluate cases from top to bottom, stopping when a case succeeds.
switch with no condition | `
Switch without a condtion is the same as switch true.

This construct can be a clean way to write long if-then-else chains.
`
defer | `
A defer statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately.
`
Write a hello world program using the defer statement. | ```
package main

import "fmt"

func main() {
	defer fmt.Println("world")
	fmt.Println("hello")
}
```
stacking defers | Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.
A pointer holds | the memory address of a value.
The pointer to a T value has the type | *T.
The zero value of a pointer is | nil.
Declare a pointer to an int using the var statement. | var p *int
The & operator generates | a pointer to its operand.
The * operator denotes | the pointer's underylying value. (dereferencing or indirecting)
pointer arithmetic | Go has no pointer arithmetic.
A struct is | a collection of fields.
Write a Point struct that holds int x and y values. | ```
type Point struct {
    X int
    Y int
}
```
Struct fields are accessed | using a dot.
pointers to structs | `
Struct fields can be accessed through a struct pointer.

You could write (*p).X but Go allows p.X, without the explicit dereference.
`
struct literals | `
A struct literal denotes a newly allocated struct value by listing the values of its fields.

```
type Person struct {
  Name string
  Age  int
}

person = Person{"Anton", 25}
```
`
You can list just a subset of fields in a struct literal by | `
using the Name: syntax.

```
type Person struct {
  Name string
  Age  int
}

person Person{Name: "Anton"}
```
`
An array of n values of type T has the type | [n]T
The expresion var a [10]int declares | a variable a as an array of ten integers. The type is [10]int.
An array's length is | part of its type, so arrays cannot be resized.
A slice is | a dynamically-sized, flexible view into the elements of an array.
A slice with elements of type T has the type | []T.
A slice is formed from an array by | `
specifying two indices, a low and a high bound, separated by a colon:

```
a[low:high].
```

This selects a half-open range which includes the first element, but excludes the last one.
`
slices are like references to arrays | `
 A slice does not store any data, it just describes a section of an underlying array.

Changing the elements of a slice modifies the corresponding elements of its underlying array.

Other slices that share the same underlying array will see those changes.
`
slice literals | A slice literal is like an array literal without the length. []bool{true, true, false}
slice defaults | `
When slicing, you may omit the high or low bounds to use their defaults instead.

The default is zero for the low bound and the length of the slice for the high bound.
`
slice length and capacity | `
The length of a slice is the number of elements it contains.

The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice.
`
The length and capacity of a slice s can be obtained using the expressions | len(s) and cap(s).
You can extend a slice's length by | re-slicing it, provided it has sufficient capacity.
The zero value of a slice is | nil with a length and capacity of 0 and no underlying array.
creating a slice with make | `
The make function allocates a zeroed array and returns a slice that refers to that array.

```
s := make([]int, 0, 5) // len(a)=0, cap(b)=5
```

The capacity is optional.
`
Slices can contain any type, | including other slices.
appending to a slice | `
Go provides a built-in append function.

```
func append(s []T, vs ...T) []T
```

The resulting value of append is a slice containing all the elements of the original slice plus the provided values.

If the backing array of s is too small to fit all the given values, a bigger array will be allocated and the returned slice will point to the newly allocated array.

```
s = append(s, 0)
```
`
range over slice | `
When ranging over a slice, two values are returned for each iteration.

The first is the index, and the second is a copy of the element at that index.

```
s := []int{1, 2, 3}

for i, v := range s {
    fmt.Println(i, v)
}
```
`
You can skip the index or value when ranging over a slice by | assiging the index or value to _.
map | A map maps keys to values.
The zero value of a map is | nil.
Use a make function to return a map of strings to ints. | `
```
m := make(map[string]int)
```
`
Write a map literal for a map that maps strings to ints. | `
```
m := map[string]int{"a": 1, "b": 2}
```
`
insert or update an element in a map | m[key] = elem
retrieve an element from a map | elem := m[key]
delete an element from a map | delete(m, key)
test that a key is present in a map | elem, ok := m[key]
function values | Function values may be used as function arguments and return values.
Define and assign a function to a variable | ```
add := func(x, y int) int {
    return x + y
}
```
function closures | `
A closure is a function value that references variables from outside its body.

The function may access and assign to the referenced variables.

The function has its own copy of the referenced variables that persists between calls to the function.
`
A method is | a function with a special receiver argument.
In a method, the receiver appears | in its own argument list between the func keyword and the method name.
You can only declare a method with a receiver | whose type is defined in the same package as the method.
You can declare a method on | struct and non-struct types.
pointer receivers | `
You can declare methods with pointer receivers.

This means the receiver type has the literal syntax *T for some type T.

Also, T cannot itself be a pointer such as *int.
`
Methods with pointer receivers can | modify the value to which the receiver points.
methods and pointer indirection | Methods with pointer receivers take either a value or a pointer as the receiver when they are called.
choosing a value or pointer receiver | `
There are two reasons to use a pointer receiver.

The first is so that the method can modify the value that its receiver points to.

The second is to avoid copying the value on each method call. This can be more efficient if the receiver is a large struct, for example.
`
An interface type is defined as | `
a set of method signatures.

```
type Stringer interface {
    String() string
}
```
`
A value of interface type can hold | any value that implements those methods.
interfaces implementation | A type implements an interface by implementing its methods. There is no explicit declaration of intent, no "implements" keyword.
interface values | `
Under the hood, interface values can be thought of as a tuple of a value and a concrete type:

(value, type)

An interface value holds a value of a specific underlying concrete type.

Calling a method on an interface value executes the method of the same name on its underlying type.
`
interface values with nil underlying values | `
If the concrete value inside the interface itself is nil, the method will be called with a nil receiver.

In some languages this would trigger a null pointer exception, but in Go it is common to write methods that gracefully handle being called with a nil receiver (as with the method M in this example.)
`
nil interface values | `
A nil interface value holds neither value nor concrete type.

Calling a method on a nil interface is a run-time error because there is no type inside the interface tuple to indicate which concrete method to call.
`
the empty interface | `
The interface type that specifies zero methods is known as the empty interface:

```
interface{}
```

An empty interface may hold values of any type. (Every type implements at least zero methods.)

Empty interfaces are used by code that handles values of unknown type. For example, fmt.Print takes any number of arguments of type interface{}.
`
type assertions | `
A type assertion provides access to an interface value's underlying concrete value.

```
t := i.(T)
```

This statement asserts that the interface value i holds the concrete type T and assigns the underlying T value to the variable t.

If i does not hold a T, the statement will trigger a panic.
`
type assertion test | `
To test whether an interface value holds a specific type, a type assertion can return two values: the underlying value and a boolean value that reports whether the assertion succeeded.

```
t, ok := i.(T)
```

If i holds a T, then t will be the underlying value and ok will be true.

If not, ok will be false and t will be the zero value of type T, and no panic occurs.
`
type switches | `
A type switch is a construct that permits several type assertions in series.

A type switch is like a regular switch statement, but the cases in a type switch specify types (not values), and those values are compared against the type of the value held by the given interface value.

```
switch v := i.(type) {
case T:
    // here v has type T
case S:
    // here v has type S
default:
    // no match; here v has the same type as i
}
```

The declaration in a type switch has the same syntax as a type assertion i.(T), but the specific type T is replaced with the keyword type.
`
fmt.Stringers interface | `
One of the most ubiquitous interfaces is Stringer defined by the fmt package.

```
type Stringer interface {
    String() string
}
```

A Stringer is a type that can describe itself as a string. The fmt package (and many others) look for this interface to print values.
`
errors | `
Go programs express error state with error values.

The error type is a built-in interface similar to fmt.Stringer:

```
type error interface {
    Error() string
}
```
`
functions returning error | `
Functions often return an error value, and calling code should handle errors by testing whether the error equals nil.

```
i, err := strconv.Atoi("42")
if err != nil {
    fmt.Printf("couldn't convert number: %v\n", err)
    return
}
fmt.Println("Converted integer:", i)
```

A nil error denotes success; a non-nil error denotes failure.
`
io.Reader interface | `
The io package specifies the io.Reader interface, which represents the read end of a stream of data.

The Go standard library contains many implementations of this interface, including files, network connections, compressors, ciphers, and others.

The io.Reader interface has a Read method:

```
func (T) Read(b []byte) (n int, err error)
```

Read populates the given byte slice with data and returns the number of bytes populated and an error value. It returns an io.EOF error when the stream ends.
`
type parameters | `
Go functions can be written to work on multiple types using type parameters. The type parameters of a function appear between brackets, before the function's arguments.

```
func Index[T comparable](s []T, x T) int
```
`
generic types | `
In addition to generic functions, Go also supports generic types. A type can be parameterized with a type parameter, which could be useful for implementing generic data structures.

This example demonstrates a simple type declaration for a singly-linked list holding any type of value.

```
// List represents a singly-linked list that holds
// values of any type.
type List[T any] struct {
	next *List[T]
	val  T
}
```
`
A goroutine is | a lightweight thread managed by the Go runtime.
code to start a goroutine that runs the function f(x) | go f(x)
Goroutines run | in the same address space, so access to shared memory must be synchronized.
Channels are | a typed conduit through which you can send and receive values.
the channel operator | `
```
<-
```

The data flows in the direction of the arrow.
`
send v to channel ch | ch <- v
receive value from channel and assign to v | v := <- ch
code to make a channel for ints | make(chan int)
By default, channel sends and receives | block until the other side is ready.
buffered channels | `
Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel:

```
ch := make(chan int, 100)
```

Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty.
`
closing channels | `
A sender can close a channel to indicate that no more values will be sent. Receivers can test whether a channel has been closed by assigning a second parameter to the receive expression: after

```
v, ok := <-ch
```

ok is false if there are no more values to receive and the channel is closed.
`
channel read loop | `
The loop:

```
for v := range ch {
}
```

receives values from the channel repeatedly until it is closed.
`
The select statement lets a goroutine | wait on multiple communication operations.
A select blocks | until one of its cases can run, then it executes that case.
A select chooses | one at random if multiple cases are ready.
code for a select statement | ```
select {
case v1 := <-ch1:
    fmt.Println("Got: ", v1)
case v2 := <-ch2:
    fmt.Println("Got: ", v2)
default:
    fmt.Println("The default case!")
}
```
default selection | `
The default case in a select is run if no other case is ready.

Use a default case to try a send or receive without blocking:

```
select {
case i := <-c:
    // use i
default:
    // receiving from c would block
}
```
`
The first statement in a Go source file must be | package name.
Executable commands must always use | package main.
comments | `
Go provides C-style /* */ block comments and C++-style // line comments.

Line comments are the norm; block comments appear mostly as package comments, but are useful within an expression or to disable large swaths of code.
`
If you have a field called owner (lower case, unexported), the getter method should be called | Owner (upper case, exported), not GetOwner.
By convention, one-method interfaces are named by | the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.
MixedCaps | The convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multiword names.
semicolons | Like C, Go's formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source. Instead the lexer uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.
One consequence of the semicolon insertion rules is | that you cannot put the opening brace of a control structure (if, for, switch, or select) on the next line. If you do, a semicolon will be inserted before the brace, which could cause unwanted effects.
break
continue
blank identifier
rune
fallthrough
_
new | A built-in function that allocates memory, but unlike its namesakes in some other languages it does not initialize the memory, it only zeros it. That is, new(T) allocates zeroed storage for a new item of type T and returns its address, a value of type *T.
composite literal
returning the address of a local variable | Unlike in C, it's perfectly OK to return the address of a local variable; the storage associated with the variable survives after the function returns.
make returns | an initialized (not zeroed) value
There are major differences between the ways arrays work in Go and C. | `
Arrays are values. Assigning one array to another copies all the elements.

In particular, if you pass an array to a function, it will receive a copy of the array, not a pointer to it.

The size of an array is part of its type. The types [10]int and [20]int are distinct.
`
iota
the init function
embedding
struct in struct embedding
interface in interface embedding
interfaces in struct embedding
define a channel of ints | ch := make(chan int)
command to run unit tests in current dir tree | go test ./...
write a unit test that fails | ```
func TestFail(t *testing.T) {
	if true {
		t.Error("This test failed")
	}
}
```
